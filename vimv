#!/usr/bin/env python

import sys
import os
import stat
import getopt
import tempfile
import pipes
import subprocess


def gen_shell_file(files):
    with tempfile.NamedTemporaryFile(prefix = 'vimv-', suffix = '.sh', delete = True) as script:
        shell = get_shell()
        script.write('#!{}\n\n'.format(shell))
        script.write('mv="mv -v --"\n\n')

        maxlen = max(map(lambda f: len(shell_quote(f)), files))

        for f in files:
            sh_f = shell_quote(f).ljust(maxlen, ' ')
            script.write('$mv ')
            script.write(sh_f)
            script.write('  ')
            script.write(sh_f)
            script.write('\n')

        script.write('\n')
        script.flush()

        retcode = exec_editor(script)
        if retcode == 0:
            return exec_shell(shell, script)


def shell_quote(filename):
    return pipes.quote(filename)


def get_editor():
    return os.getenv('EDITOR', 'edit')


def get_shell():
    return os.getenv('SHELL', '/bin/sh')


def exec_editor(script):
    retcode = subprocess.call([get_editor(), script.name])
    if retcode != 0:
        sys.stderr.write('Editor failed with errcode {}.\n'.format(errcode))
    return retcode


def exec_shell(shell, script):
    script.seek(0)
    return subprocess.call([shell], stdin = script)


def print_help(script_name, out):
    out.write('Usage: ' + script_name + ' files...\n')
    out.write('    Opens editor to rename the files.\n')
    out.write('\n')


def main(argv):
    try:
        opts, args = getopt.getopt(argv[1:], "h", [])

        for o, a in opts:
            if o == '-h':
                print_help(argv[0], sys.stdout)
                sys.exit(0)
        
        retval = gen_shell_file(args)
        sys.exit(retval)

    except getopt.GetoptError as err:
        sys.stderr.write('Error: {}\n\n'.format(str(err)))
        print_help(argv[0], sys.stderr)
        sys.exit(-1)


if __name__ == "__main__":
    main(sys.argv)

